/*
 * Copyright (C) 2013 JAFS.es
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package es.jafs.jaiberdroid;

import java.lang.reflect.ParameterizedType;
import java.util.List;

import es.jafs.jaiberdroid.Query.Type;

/**
 * Generic query. All the new querys must be inheritate from this.
 * @author  Jose Antonio Fuentes Santiago
 * @version 0.5
 * @param <T> Class of entity.
 */
public class GenericQuery<T> {
	/** Instance of Query Manager. */
	private static QueryManager queryManager;
	/** Instance of Entity Manager. */
	private static EntityManager entityManager;
	/** Entity of query. */
	private Entity entity;


	/**
	 * Default constructor of the class. 
	 */
	@SuppressWarnings("unchecked")
	public GenericQuery() {
		final Class<T> type = (Class<T>) ((ParameterizedType)getClass().getGenericSuperclass())
																				.getActualTypeArguments()[0];

		if (null == entityManager) {
			entityManager = JaiberdroidInstance.getEntityManager();
		}
		if (null == queryManager) {
			queryManager = JaiberdroidInstance.getQueryManager();
		}

		entity = entityManager.getEntity(type);
	}


	/**
	 * Get all elements of the table.
	 * @return A list of results generated by the query.
	 * @throws JaiberdroidException 
	 */
	@SuppressWarnings("unchecked")
	public List<T> getAll() throws JaiberdroidException {
		return (List<T>) queryManager.executeQuery(new Query(Type.SELECT, entity.getReferenced()));
	}


	/**
	 * Find a object with its PK.
	 * @param  id  Id of the object to find.
	 * @return Object finded or null is not exists.
	 * @throws JaiberdroidException 
	 */
	@SuppressWarnings("unchecked")
	public T findByPk(final int id) throws JaiberdroidException {
		T current = null;

		final Query query = new Query(Type.SELECT, entity.getReferenced());
		query.addArg(id);
		query.setCondition(JaiberdroidSql._ID + " = ?");

		final List<T> resul = (List<T>) queryManager.executeQuery(query);
		if (null != resul && !resul.isEmpty()) {
			current = resul.get(0);
		}

		return current;
	}


	/**
	 * Insert the received object.
	 * @param  object  Object to insert.
	 * @return True if the object was inserted.
	 * @throws JaiberdroidException 
	 */
	public boolean insert(final T object) throws JaiberdroidException {
		return (-1L != (Long) queryManager.executeQuery(Query.createInsert(object)));
	}


	/**
	 * Update the received object.
	 * @param  object  Object to update.
	 * @return Boolean value that is true if entity has been updated.
	 * @throws JaiberdroidException 
	 */
	public boolean update(final T object) throws JaiberdroidException {
		return (1L == (Long) queryManager.executeQuery(Query.createUpdate(object)));
	}


	/**
	 * Delete an object with its id.
	 * @param  id  Id of the object to delete.
	 * @return Boolean value that is true if the row has been deleted.
	 * @throws JaiberdroidException 
	 */
	public boolean remove(final int id) throws JaiberdroidException {
		return (1L == (Long) queryManager.executeQuery(Query.createDelete(entity.getReferenced(), id)));
	}


	/**
	 * Delete all objects in table.
	 * @return Number of rows affected.
	 * @throws JaiberdroidException 
	 */
	public long removeAll() throws JaiberdroidException {
		return (Long) queryManager.executeQuery(Query.createDelete(entity.getReferenced(), -1));
	}


	/**
	 * Gets a boolean value that is true if object with id received exists.
	 * @param  id  Id of the object to find.
	 * @return Boolean value that is true if object with id received exists.
	 * @throws JaiberdroidException 
	 */
	public boolean exists(final int id) throws JaiberdroidException {
		return (null != findByPk(id));
	}


	/**
	 * Gets the rows number.
	 * @return Long with rows number.
	 * @throws JaiberdroidException 
	 */
	public long count() throws JaiberdroidException {
		return queryManager.executeCountQuery(entity);
	}


	/**
	 * Executes a generic SQL query.
	 * @param  sql  SQL query to execute.
	 * @return An object with the result.
	 */
	protected Object executeQuery(final String sql) {
		return queryManager.executeQuery(sql);
	}


	/**
	 * Executes a query and return its result.
	 * @param  query  Query to execute.
	 * @return Object with result of query.
	 * @throws JaiberdroidException When there is an error on query.
	 */
	protected Object executeQuery(final Query query) throws JaiberdroidException {
		return queryManager.executeQuery(query);
	}
}
